#include<cstdio>
#include<cstring>
#include<cctype>
#include<map>

#define LL long long

const int N = 5e6 + 6;

LL phi[N + 5], Prime[N + 5], mu[N + 5]; bool notPrime[N + 5];

int  n, m, t;

std:: map < LL, LL > Sphi, Smu;

void euler() {
	memset(notPrime, false, sizeof(notPrime));
	m = 0; mu[1] = phi[1] = 1;
	for(int i = 2; i <= N; i++) {
		if(!notPrime[i]) {
			Prime[++m] = i;
			mu[i] = -1; phi[i] = i - 1;
		}
		for(int j = 1; j <= m && 1ll * i * Prime[j] <= N; j++) {
			notPrime[i * Prime[j]] = true;
			if(i % Prime[j] == 0) {
				phi[i * Prime[j]] = phi[i] * Prime[j];
				mu[i * Prime[j]] = 0;
				break;
			}
			phi[i * Prime[j]] = phi[i] * phi[Prime[j]];
			mu[i * Prime[j]] = -mu[i];
		}
	}
	for(int i = 1; i <= N; i++)
		phi[i] += phi[i - 1],
		mu[i] += mu[i - 1];
}


LL Get_phi(int x) {
	if(x <= N) return phi[x];
	if(Sphi[x]) return Sphi[x];
	LL res = 1ll * (1ll * x + 1) * x / 2ll;
	for(LL l = 2, r; l <= x; l = r + 1) {
		r = x / (x / l);
		res -= Get_phi(x / l) * (r - l + 1);
	}
	return Sphi[x] = res;
}

LL Get_mu(int x) {
	if(x <= N) return mu[x];
	if(Smu[x]) return Smu[x];
	LL res = 1ll;
	for(LL l = 2, r; l <= x; l = r + 1) {
		r = x / (x / l);
		res -= Get_mu(x / l) * (r - l + 1);
	}
	return Smu[x] = res;
}

inline int read() {
	int x = 0, f = 1, c = getchar();
	for(; !isdigit(c); c = getchar())
		if(c == '-')
			f = -1;
	for(; isdigit(c); c = getchar())
		x = x * 10 + c - 48;
	return x * f;
}

int main() {
	euler();
	t = read();
	while(t--) {
		n = read();
		printf("%lld %lld\n", Get_phi(n), Get_mu(n));
	}
	return 0;
}
