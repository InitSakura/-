#include<cstdio>
#include<cmath>
#include<iostream>
#include<cctype>
#include<algorithm>

using namespace std;

const double PI = acos(-1.0);
const int N = 4e6 + 10;

struct complex {
	double x, y;
	complex (double x_ = 0,double y_ = 0) : x(x_), y(y_) {}
	complex operator + (complex b) {return complex(x + b.x, y + b.y);}
	complex operator - (complex b) {return complex(x - b.x, y - b.y);}
	complex operator * (complex b) {return complex(x * b.x - y * b.y, x * b.y + y * b.x);}
}a[N], b[N];

int n, m, lim = 1, l, r[N];

void FFT(complex *A, int type) {
	for(int i = 0; i < lim; i++)
		if(i < r[i]) swap(A[i], A[r[i]]);
	for(int mid = 1; mid < lim; mid <<= 1) {
		complex Wn(cos(PI / mid), type * sin(PI / mid));
		for(int R = mid << 1, j = 0; j < lim; j += R) {
			complex w(1, 0);
			for(int k = 0; k < mid; k++, w = w * Wn) {
				complex x = A[j + k], y = w * A[j + k + mid];
				A[j + k] = x + y;
				A[j + k + mid] = x - y;
			}
		}
	}
}

inline int read() {
	int x = 0, f = 1, c = getchar();
	for(; !isdigit(c); c = getchar())
		if(c == '-')
			f = -1;
	for(; isdigit(c); c = getchar())
		x = x * 10 + c - 48;
	return x * f;
}

int main() {
	n = read(), m = read();
	for(int i = 0; i <= n; i++) a[i].x = read();
	for(int i = 0; i <= m; i++) b[i].x = read();
	while(lim <= n + m) lim <<= 1, ++l;
	for(int i = 0; i < lim; i++)
		r[i] = (r[i >> 1] >> 1) | ((i & 1) << (l - 1));
	FFT(a, 1);
	FFT(b, 1);
	for(int i = 0; i <= lim; i++) a[i] = a[i] * b[i];
	FFT(a, -1);
	for(int i = 0; i <= n + m; i++)
		printf("%d ", (int) (a[i].x / lim + 0.5));
	return 0;
}
